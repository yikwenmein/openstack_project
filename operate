#!/bin/bash

# # Checking the required arguments
# if [[ -z "$1" || -z "$2" || -z "$3" ]]; then
#     echo "Error: Please specify the openrc, tag, and ssh_key"
#     exit 1
# fi

# # Keeping track of the time taken to deploy the solution
# SECONDS=0 

# # Defining variables based on arguments
# openrc_sr=${1}      # openrc file
# tag_sr=${2}         # tag for identification
# ssh_key_sr=${3}   # ssh_key

# #ssh_key_sr=${ssh_key_path%.pub} # Removing .pub from the ssh key path

# # Other variables
# natverk_namn="${tag_sr}_network"
# sr_subnet="${tag_sr}_subnet"
# sr_keypair="${tag_sr}_key"
# sr_router="${tag_sr}_router"
# sr_security_group="${tag_sr}_security_group"
# sr_haproxy_server="${tag_sr}_proxy"
# sr_bastion_server="${tag_sr}_bastion"
# sr_server="${tag_sr}_server"
# sshconfig="config"
# knownhosts="known_hosts"
# hostsfile="hosts"
# nodes_yaml="nodes.yaml"

# run_status=0 # ansible run status

# echo "$(date) Running operate mode for tag: $tag_sr using $openrc_sr for credentials"
# source $openrc_sr

# generate_config() {
#     # Extract the second IP address for the bastion server
#     bastionfip=$(openstack server list --name "$sr_bastion_server" -c Networks -f value | awk '/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/ {if (++count == 2) print $1}')
    
# # Extract the second IP address for the HAProxy server
#     haproxyfip=$(openstack server list --name "$sr_haproxy_server" -c Networks -f value | awk '/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/ {if (++count == 2) print $1}')

#     # bastionfip=$(openstack server list --name $sr_bastion_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
#     # haproxyfip=$(openstack server list --name $sr_haproxy_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
#     echo "Bastion IP address: $bastionfip"
#     echo "Proxy IP address: $haproxyfip"
#     echo "$(date) Generating config file"
#     cat <<EOF >> $sshconfig
# Host $sr_bastion_server
#    User ubuntu
#    HostName $bastionfip
#    IdentityFile $ssh_key_sr
#    UserKnownHostsFile /dev/null
#    StrictHostKeyChecking no
#    PasswordAuthentication no

# Host $sr_haproxy_server
#    User ubuntu
#    HostName $haproxyfip
#    IdentityFile $ssh_key_sr
#    StrictHostKeyChecking no
#    PasswordAuthentication no
#    ProxyJump $sr_bastion_server
# EOF

#     # Generate hosts file
#     cat <<EOF > $hostsfile
# [bastion]
# $sr_bastion_server

# [proxyserver]
# $sr_haproxy_server

# [webservers]
# EOF

#     # The list of running servers
#     active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag_sr}_server([0-9]+)")

#     # Getting IP addresses for servers
#     for server in $active_servers; do
#         ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+')
#         cat <<EOF >> $sshconfig

# Host $server
#    User ubuntu
#    HostName $ip_address
#    IdentityFile $ssh_key_sr
#    UserKnownHostsFile /dev/null
#    StrictHostKeyChecking no
#    PasswordAuthentication no
#    ProxyJump $sr_bastion_server
# EOF
#         echo "$server" >> $hostsfile
#         echo "$ip_address" >> $nodes_yaml
#     done

#     cat <<EOF >> $hostsfile

# [all:vars]
# ansible_user=ubuntu
# ansible_ssh_private_key_file=$ssh_key_sr
# ansible_ssh_common_args=' -F $sshconfig '
# EOF
# }

# delete_config() {
#     for file in "$hostsfile" "$sshconfig" "$knownhosts" "$nodes_yaml"; do
#         [[ -f $file ]] && rm $file
#     done
# }

# while true; do
#     no_of_servers=$(grep -E '[0-9]' servers.conf) # Fetching the number of nodes from servers.conf
#     echo "$(date) We require $no_of_servers nodes as specified in servers.conf"

#     existing_servers=$(openstack server list --status ACTIVE -c Name -f value)
#     devservers_count=$(grep -c $sr_server <<< "$existing_servers")
#     echo "$(date) $devservers_count nodes available."

#     if ((no_of_servers > devservers_count)); then
#         devservers_to_add=$((no_of_servers - devservers_count))
#         echo "$(date) Creating $devservers_to_add more nodes ..."
#         for ((i=0; i<devservers_to_add; i++)); do
#             v=$((RANDOM % 100 + 10))
#             devserver_name="${sr_server}${v}"
#             while openstack server list --status ACTIVE -f value -c Name | grep -qFx "$devserver_name"; do
#                 v=$((RANDOM % 100 + 10))
#                 devserver_name="${sr_server}${v}"
#             done
#             run_status=1
#             openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$devserver_name" --key-name "$sr_keypair" --flavor "1C-1GB-20GB" --network "$natverk_namn" --security-group "$sr_security_group"
#             echo "$(date) Created $devserver_name node"
#             while [[ $(openstack server show "$devserver_name" -f value -c status) != "ACTIVE" ]]; do
#                 sleep 5
#             done
#         done
#     elif ((no_of_servers < devservers_count)); then
#         devservers_to_remove=$((devservers_count - no_of_servers))
#         echo "$(date) Removing $devservers_to_remove nodes."
#         run_status=1
#         for ((i=0; i<devservers_to_remove; i++)); do
#             server_to_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag_sr}_server([0-9]+)")
#             openstack server delete "$server_to_delete" --wait
#             echo "$(date) Removed $server_to_delete node"
#         done
#     else
#         echo "$(date) Required number of nodes are present."
#     fi

#     current_servers=$(openstack server list --status ACTIVE -c Name -f value)
#     new_count=$(grep -c $sr_server <<< "$current_servers")

#     if [[ "$no_of_servers" == "$new_count" && "$run_status" -eq 0 ]]; then
#         echo "$(date) Sleeping 30 seconds. Press CTRL-C if you wish to exit."
#     else
#         delete_config
#         generate_config
#         echo "$(date) Running ansible-playbook"
#         ansible-playbook -i "$hostsfile" site.yaml
#         run_status=0
#         echo "$(date) Checking node availability through the ${sr_bastion_server}."
#         curl "http://$bastionfip:5000"
#         echo "$(date) Done, the solution has been deployed."
#         echo "$(date) Sleeping 30 seconds. Press CTRL-C if you wish to exit."
#     fi

#     sleep 30
# done





